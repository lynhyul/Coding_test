## 그리디 알고리즘이란?
## 현재 상황에서지금 당장 좋은 것만 고르는 방법을 의미.
## 정당성 분석이 중요 

##===========================================================
## ex 1) 거스름돈 : 답안 예시
n = 1260
count = 0

array = [500, 100 , 50 ,10]

for coin in array :
    count += n // coin
    n %= coin

print(count)    # 6

##============================================================

# 어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여
# 수행하려고 합니다. 단 , 두 번째 연산은 N이 K로 나누어 떨어질 때만
# 선택할 수 있습니다.

# 1. N에서 1을 뺍니다.
# 2. N을 K로 나눕니다.

# 예를 들어 N이 17, K가 4라고 가정합시다. 이때 1번의 과정을 한 번 수행하면
# N은 16이 됩니다. 이후에 2번의 과정을 두 번 수행하면 N은 1이됩니다.
# 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다. 이는 N을 1로 만드는 최소 횟수입니다.
# N과 K가 주어질 때 N이 1이 될때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요

# 시간제한 2초 / 메모리 제한 128MB

# 풀이 => 주어진 N에 대하여 최대한 많이 나누기를 수행
# N의 값을 줄일 때 2 이상의 수로 나누는 작업이 1을 빼는 작업보다 수를 훨씬
# 많이 줄일 수 있습니다.

n, k = map(int, input().split())

result = 0

while True :
    # N이 K로 나누어 떨어지는 수가 될 때까지 빼기
    target = (n //k) * k    # 몫으로 나누어 떨어지기 때문에 이를 다시 k를 곱하게 되면
                            # k로 나누어 떨어지는 수가 된다. -1을 자동으로 수행하는 것과 같다.
    result += (n - target)  # -1이 몇 번 수행됐는지 알기 위해서 사용
    n = target  # -1이 다 수행 된 상태에서 나누기 시작한다.
    # N이 K보다 작을 때 (더 이상 나눌 수 없을 때) 반복문 탈출
    if n < k :
        break
    result += 1
    n //= k

result += (n-1)
print(result)


