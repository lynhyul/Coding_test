# 정수 n이 매개변수로 주어집니다. 다음 그림과 같이 밑변의 길이와 높이가 n인 삼각형에서 맨 위 꼭짓점부터
#  반시계 방향으로 달팽이 채우기를 진행한 후, 첫 행부터 마지막 행까지 모두 순서대로 합친 새로운 배열을 
#  return 하도록 solution 함수를 완성해주세요.

# n	result
# 4	[1,2,9,3,10,8,4,5,6,7]
# 5	[1,2,12,3,13,11,4,14,15,10,5,6,7,8,9]
# 6	[1,2,15,3,16,14,4,17,21,13,5,18,19,20,12,6,7,8,9,10,11]


# =============================풀이 ============================================================================

# 1. 삼각 달팽이를 저장할 res, res의 인덱스에 접근하기위한 x = -1, y = 0 , res에 저장할 수 num을 선언 및 초기화 한다.

# 2. 이중 for문으로 한변을 지날때마다  4개~ 1개로 저장할 수가 적어지니 0~n까지, i~n까지의 이중 for문 작성

# 3. i % 3 == 0이면 down

#    i % 3 == 1이면 right

#    i % 3 == 2이면 up

# 4. 알맞은 인덱스에 num을 1씩 늘리며 저장하면 res에 삼각 달팽이가 저장된다.

# 5. 이중 for문으로 answer에 저장한 후 반환하면 해결 할 수 있다.~!

#ex)  n=4일때의 삼각 달팽이

# 01                        1

# 02 09                    2  9    

# 03 10 08                3  10  8

# 04 05 06 07            4  5   6   7

def solution(n):
    	# 1
    res = [[0] * n for _ in range(n)]   # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    print(res)
    answer = []
    x, y = -1, 0
    num = 1

	# 2
    for i in range(n):          # for i in range(4) :
        for _ in range(i, n):   # for j in range(i,4)
    #3
            #down
            if i % 3 == 0:
                x += 1

            #right 
            elif i % 3 == 1:
                y += 1
                
            #up
            elif i % 3 == 2:
                x -= 1
                y -= 1
      #4          
            res[x][y] = num
            print(res[x][y])
            num += 1
    print(res)  # [[1, 0, 0, 0], [2, 9, 0, 0], [3, 10, 8, 0], [4, 5, 6, 7]]   
    for i in res:
        for j in i:
            if j != 0:
                answer.append(j)
    return answer

solution(4)